/**
 * Ê†ëÊ¥ûËØ¶ÊÉÖÈ°µÈù¢ÂØºËà™ÁªÑ‰ª∂
 * ÂèÇËÄÉMainTabNavPageÁöÑÁªìÊûÑÔºåÂ∞ÜTreeHoleDetailPageÁõ¥Êé•ÈõÜÊàê
 */
import { TreeHoleComment, TreeHoleItem, PostTreeHoleRequest } from '../models/TreeHoleModels';
import { TreeHoleApiService } from '../services/api/TreeHoleApiService';
import { LoginApiService } from '../services/api/LoginApiService';
import { UserInfoManager } from '../common/utils/UserInfoManager';
import { curves } from '@kit.ArkUI';
import { API_CONFIG } from '../common/constants/AppConstants';

@Builder
export function TreeHoleDetailNavPageBuilder() {
  TreeHoleDetailNavPage();
}

@Component
struct TreeHoleDetailNavPage {
  @Consume('NavStack') pathStack: NavPathStack;
  @State private treeHoleItem: TreeHoleItem | null = null;
  @State private commentsList: TreeHoleComment[] = [];
  @State private isLoading: boolean = false;
  @State private commentText: string = '';
  @State private isCommenting: boolean = false;
  @State private isLoggedIn: boolean = false;
  @State private pageOpacity: number = 0; // È°µÈù¢ÂàùÂßãÈÄèÊòéÂ∫¶‰∏∫0
  @State private pageTranslateY: number = 30; // È°µÈù¢ÂàùÂßãÂêë‰∏ãÂÅèÁßª30px
  @State private transitionEffect: TransitionEffect = TransitionEffect.IDENTITY;
  // Êé•Êî∂ÂèÇÊï∞
  private treeHoleId: number = 0;
  private treeHoleApiService: TreeHoleApiService = TreeHoleApiService.getInstance();
  private loginService: LoginApiService = LoginApiService.getInstance();
  private userInfoManager: UserInfoManager = UserInfoManager.getInstance();

  aboutToAppear(): void {
    console.info('üå≥ [TreeHoleDetailNavPage] È°µÈù¢ÂàùÂßãÂåñ');
    this.checkLoginStatus();
    this.startFadeInAnimation();
  }

  @Builder
  buildTitleBar() {
    Row() {
      Button('ËøîÂõû')
        .fontSize(16)
        .fontColor('#666666')
        .backgroundColor(Color.Transparent)
        .onClick(() => {
          // ËÆæÁΩÆËøîÂõûËΩ¨Âú∫ÊïàÊûú
          this.transitionEffect = TransitionEffect.IDENTITY;
          this.getUIContext().animateTo({ curve: curves.interpolatingSpring(0, 1, 342, 38) }, () => {
            this.pathStack.pop(false);
          });
        })

      Text('Ê†ëÊ¥ûËØ¶ÊÉÖ')
        .fontSize(18)
        .fontWeight(FontWeight.Medium)
        .layoutWeight(1)
        .textAlign(TextAlign.Center)

      // Âç†‰Ωç
      Row() {
      }
      .width(60)
    }
    .width('100%')
    .height(50)
    .padding({ left: 16, right: 16 })
    .backgroundColor(Color.White)
    .justifyContent(FlexAlign.SpaceBetween)
    .alignItems(VerticalAlign.Center)
  }

  @Builder
  buildTreeHoleDetail() {
    if (this.treeHoleItem) {
      Column() {
        // È°∂ÈÉ®Êó•ÊúüÂíåÊó∂Èó¥‰ø°ÊÅØ
        Row() {
          // Â§ßÂè∑Êó•ÊúüÊòæÁ§∫
          Column() {
            Text(this.treeHoleItem.createAt.substring(8, 10))
              .fontSize(32)
              .fontWeight(FontWeight.Bold)
              .fontColor('#45CAD9')
              .lineHeight(36)

            Text(this.treeHoleItem.createAt.substring(0, 7))
              .fontSize(12)
              .fontColor('#999999')
              .margin({ top: 2 })

            Text(this.treeHoleItem.createAt.substring(11, 19))
              .fontSize(12)
              .fontColor('#999999')
              .margin({ top: 2 })
          }
          .alignItems(HorizontalAlign.Center)
          .margin({ right: 20 })

          // ÈîÄÊØÅÂÄíËÆ°Êó∂ÔºàÂ¶ÇÊûúÊúâÁöÑËØùÔºâ
          if (this.treeHoleItem.deleteTime) {
            Column() {
              Text('‚è∞ ÈîÄÊØÅÂÄíËÆ°Êó∂')
                .fontSize(10)
                .fontColor('#FF6B6B')
              Text(this.formatDeleteTime())
                .fontSize(12)
                .fontColor('#FF6B6B')
                .fontWeight(FontWeight.Medium)
            }
            .alignItems(HorizontalAlign.Center)
          }
        }
        .width('100%')
        .justifyContent(FlexAlign.Start)
        .alignItems(VerticalAlign.Top)
        .margin({ bottom: 16 })

        // Â∏ñÂ≠êÂÜÖÂÆπ
        Text(this.treeHoleItem.content)
          .fontSize(16)
          .fontColor('#333333')
          .lineHeight(24)
          .width('100%')
          .margin({ bottom: 16 })
          .textAlign(TextAlign.Start)
          .geometryTransition(`content_${this.treeHoleItem.id}`, { follow: true })

        // ‰ΩúËÄÖ‰ø°ÊÅØ
        Row() {
          Image(this.treeHoleItem.avatar ? `${API_CONFIG.BASE_URL}${this.treeHoleItem.avatar}` :
          $r('app.media.defaultAvatar'))
            .width(32)
            .height(32)
            .borderRadius(16)
            .margin({ right: 12 })
            .geometryTransition(`avatar_${this.treeHoleItem.id}`, { follow: true })

          Column() {
            Text(this.treeHoleItem.anonymous === 1 ?
              (this.treeHoleItem.nickName || `ÂåøÂêçÁî®Êà∑${this.treeHoleItem.userId}`) :
            this.treeHoleItem.realName)
              .fontSize(14)
              .fontColor('#666666')
              .fontWeight(FontWeight.Medium)
              .geometryTransition(`author_${this.treeHoleItem.id}`, { follow: true })

            Text(this.treeHoleItem.anonymous === 1 ? 'ÂåøÂêçÂèëÂ∏É' : 'ÂÆûÂêçÂèëÂ∏É')
              .fontSize(12)
              .fontColor('#999999')
              .margin({ top: 2 })
          }
          .alignItems(HorizontalAlign.Start)
        }
        .width('100%')
        .justifyContent(FlexAlign.Start)
        .margin({ bottom: 16 })

        // Â∫ïÈÉ®ÁªüËÆ°ÂíåÊìç‰ΩúÊ†è
        Row() {
          // ÁªüËÆ°‰ø°ÊÅØ
          Row() {
            Image($r('app.media.comment'))
              .width(16)
              .height(16)
              .margin({ right: 8 })
            Text(`${this.treeHoleItem.replies}`)
              .fontSize(12)
              .fontColor('#999999')
          }
          .geometryTransition(`comment_${this.treeHoleItem.id}`, { follow: true })

          Blank()

          // ÁÇπËµûÊìç‰Ωú
          Row() {
            Image(this.treeHoleItem.isLike === 1 ? $r('app.media.like_active') : $r('app.media.like'))
              .width(16)
              .height(16)
              .margin({ right: 4 })
              .fillColor(this.treeHoleItem.isLike === 1 ? '#FF6B6B' : '#999999')

            Text(this.treeHoleItem.likes.toString())
              .fontSize(14)
              .fontColor(this.treeHoleItem.isLike === 1 ? '#FF6B6B' : '#666666')
          }
          .padding({
            left: 8,
            right: 8,
            top: 6,
            bottom: 6
          })
          .borderRadius(12)
          .backgroundColor(this.treeHoleItem.isLike === 1 ? '#FFF0F0' : '#F5F5F5')
          .geometryTransition(`like_${this.treeHoleItem.id}`, { follow: true })
          .onClick(() => {
            this.handleLikeClick();
          })
        }
        .width('100%')
        .alignItems(VerticalAlign.Center)
      }
      .width('100%')
      .padding(20)
      .backgroundColor('#FFFFFF')
      .borderRadius(16)
      .margin({ bottom: 16 })
      .shadow({
        radius: 8,
        color: '#1A000000',
        offsetX: 0,
        offsetY: 2
      })
    }
  }

  @Builder
  buildCommentsHeader() {
    Row() {
      Image($r('app.media.comment'))
        .width(16)
        .height(16)
        .margin({ right: 8 })
      Text(`ËØÑËÆ∫`)
        .fontSize(18)
        .fontWeight(FontWeight.Medium)
        .fontColor('#333333')

      Text(`(${this.commentsList.length})`)
        .fontSize(16)
        .fontColor('#999999')
        .margin({ left: 6 })

      Blank()

      // ÊéíÂ∫èÊåâÈíÆ
      Text('ÊåâÊó∂Èó¥ÊéíÂ∫è')
        .fontSize(12)
        .fontColor('#999999')
    }
    .width('100%')
    .padding({ top: 8, bottom: 16 })
  }

  @Builder
  buildCommentsList() {
    if (this.commentsList.length === 0) {
      Column() {
        Text('ÊöÇÊó†ËØÑËÆ∫ÔºåÂø´Êù•Êä¢Ê≤ôÂèëÂêß~')
          .fontSize(14)
          .fontColor('#999999')
          .textAlign(TextAlign.Center)
      }
      .width('100%')
      .height(80)
      .justifyContent(FlexAlign.Start)
      .alignItems(HorizontalAlign.Center)
      .padding({ top: 20 })
    } else {
      Column() {
        ForEach(this.commentsList, (comment: TreeHoleComment) => {
          this.buildCommentItem(comment)
        }, (comment: TreeHoleComment) => comment.id.toString())
      }
      .width('100%')
      .alignItems(HorizontalAlign.Start)
    }
  }

  @Builder
  buildCommentItem(comment: TreeHoleComment) {
    Column() {
      Row() {
        Image(comment.avatar ? `${API_CONFIG.BASE_URL}${comment.avatar}` : $r('app.media.defaultAvatar'))
          .width(36)
          .height(36)
          .borderRadius(18)
          .margin({ right: 12 })

        Column() {
          Text(comment.author)
            .fontSize(15)
            .fontColor('#333333')
            .fontWeight(FontWeight.Medium)
            .alignSelf(ItemAlign.Start)

          Text(this.formatCommentTime(comment.createTime))
            .fontSize(11)
            .fontColor('#999999')
            .margin({ top: 3 })
            .alignSelf(ItemAlign.Start)
        }
        .alignItems(HorizontalAlign.Start)
        .layoutWeight(1)

        // ÂåøÂêçÊ†áËØÜ
        if (comment.isAnonymous) {
          Text('ÂåøÂêç')
            .fontSize(10)
            .fontColor('#999999')
            .padding({
              left: 6,
              right: 6,
              top: 2,
              bottom: 2
            })
            .backgroundColor('#F5F5F5')
            .borderRadius(8)
        }
      }
      .width('100%')
      .margin({ bottom: 12 })

      // ËØÑËÆ∫ÂÜÖÂÆπ
      Text(comment.content)
        .fontSize(15)
        .fontColor('#333333')
        .lineHeight(22)
        .width('100%')
        .textAlign(TextAlign.Start)
    }
    .width('100%')
    .padding(16)
    .backgroundColor($r('sys.color.comp_background_list_card'))
    .borderRadius(12)
    .borderWidth(1)
    .borderColor('#E8E8E8')
    .margin({ bottom: 12 })
    .shadow({
      radius: 6,
      color: '#0D000000',
      offsetX: 0,
      offsetY: 2
    })
  }

  @Builder
  buildCommentInput() {
    Column() {
      // Â≠óÊï∞ÁªüËÆ°ÊèêÁ§∫ÔºàÊ∑ªÂä†Âä®ÁîªÊïàÊûúÔºâ
      Row() {
        Blank()
        Text(`${this.commentText.length}/500`)
          .fontSize(12)
          .fontColor(this.commentText.length > 500 ? '#FF6B6B' : '#999999')
      }
      .width('100%')
      .height(this.commentText.length > 0 ? 32 : 0) // Âä®ÊÄÅÈ´òÂ∫¶
      .opacity(this.commentText.length > 0 ? 1 : 0) // Âä®ÊÄÅÈÄèÊòéÂ∫¶
      .padding({ 
        left: 16, 
        right: 16, 
        bottom: this.commentText.length > 0 ? 8 : 0 // Âä®ÊÄÅÂÜÖËæπË∑ù
      })
      .animation({
        duration: 300,
        curve: Curve.EaseInOut,
        iterations: 1,
        playMode: PlayMode.Normal
      }) // Ê∑ªÂä†Âä®ÁîªÊïàÊûú

      // ËæìÂÖ•Ê°ÜÂíåÂèëÈÄÅÊåâÈíÆ
      Row() {
        TextInput({ placeholder: 'ÂÜô‰∏ã‰Ω†ÁöÑËØÑËÆ∫...', text: this.commentText })
          .layoutWeight(1)
          .height(40)
          .fontSize(14)
          .backgroundColor('#F5F5F5')
          .borderRadius(20)
          .padding({ left: 16, right: 16 })
          .borderWidth(this.commentText.length > 500 ? 1 : 0)
          .borderColor(this.commentText.length > 500 ? '#FF6B6B' : 'transparent')
          .onChange((value: string) => {
            this.commentText = value;
          })
          .onSubmit(() => {
            this.handleSendComment();
          })
          .enabled(!this.isCommenting)

        if (this.commentText.trim().length > 0) {
          if (this.isCommenting) {
            // ÂèëÈÄÅ‰∏≠Áä∂ÊÄÅ
            Row() {
              LoadingProgress()
                .width(16)
                .height(16)
                .color('#007AFF')
                .margin({ right: 4 })
              Text('ÂèëÈÄÅ‰∏≠...')
                .fontSize(12)
                .fontColor('#007AFF')
            }
            .height(40)
            .padding({ left: 12, right: 12 })
            .borderRadius(20)
            .backgroundColor('#F0F8FF')
            .margin({ left: 12 })
            .transition({
              type: TransitionType.Insert,
              opacity: 1,
              translate: { x: 0, y: 0 }
            })
            .transition({
              type: TransitionType.Delete,
              opacity: 0,
              translate: { x: 20, y: 0 }
            })
          } else {
            // Ê≠£Â∏∏ÂèëÈÄÅÊåâÈíÆ
            Button('ÂèëÈÄÅ')
              .fontSize(14)
              .fontColor('#FFFFFF')
              .backgroundColor(this.commentText.length > 500 ? '#CCCCCC' : '#007AFF')
              .borderRadius(20)
              .height(40)
              .width(60)
              .margin({ left: 12 })
              .enabled(!this.isCommenting && this.commentText.length <= 500)
              .onClick(() => {
                this.handleSendComment();
              })
              .transition({
                type: TransitionType.Insert,
                opacity: 1,
                translate: { x: 0, y: 0 }
              })
              .transition({
                type: TransitionType.Delete,
                opacity: 0,
                translate: { x: 20, y: 0 }
              })
          }
        }
      }
      .width('100%')
      .padding({ left: 16, right: 16, bottom: 16 })
    }
    .width('100%')
    .backgroundColor('#FFFFFF')
    // ÂÆåÂÖ®ÁßªÈô§È°∂ÈÉ®ËæπÊ°ÜÔºå‰ΩøÁî®Èò¥ÂΩ±Êõø‰ª£ÂàÜÈöîÊïàÊûú
    .shadow({
      radius: 4,
      color: '#10000000',
      offsetX: 0,
      offsetY: -2
    })
    .padding({ top: 16 }) // Â¢ûÂä†È°∂ÈÉ®ÂÜÖËæπË∑ù
  }

  @Builder
  buildLoadingState() {
    Column() {
      LoadingProgress()
        .width(50)
        .height(50)
        .color('#007AFF')
        .margin({ bottom: 16 })

      Text('Âä†ËΩΩ‰∏≠...')
        .fontSize(14)
        .fontColor('#999999')
    }
    .width('100%')
    .height('100%')
    .justifyContent(FlexAlign.Center)
  }

  @Builder
  buildLoginPrompt() {
    Row() {
      Text('ÁôªÂΩïÂêéÂèØÂèÇ‰∏éËØÑËÆ∫ÂíåÁÇπËµû‰∫íÂä®')
        .fontSize(14)
        .fontColor('#999999')

      Blank()

      Button('ÂéªÁôªÂΩï')
        .fontSize(14)
        .fontColor('#45CAD9')
        .backgroundColor(Color.Transparent)
        .borderWidth(1)
        .borderColor('#45CAD9')
        .borderRadius(16)
        .padding({
          left: 16,
          right: 16,
          top: 6,
          bottom: 6
        })
        .onClick(() => {
          // ÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä†Ë∑≥ËΩ¨Âà∞ÁôªÂΩïÈ°µÈù¢ÁöÑÈÄªËæë
          console.info('üå≥ [TreeHoleDetailNavPage] Áî®Êà∑ÁÇπÂáªÂéªÁôªÂΩï');
        })
    }
    .width('100%')
    .padding({
      left: 16,
      right: 16,
      top: 12,
      bottom: 12
    })
    .backgroundColor('#F8F9FA')
  }

  build() {
    NavDestination() {
      Column() {
        // Ëá™ÂÆö‰πâÊ†áÈ¢òÊ†è
        this.buildTitleBar()

        if (this.treeHoleItem) {
          // ‰∏ªÂÜÖÂÆπÂå∫Âüü
          Scroll() {
            Column() {
              // Ê†ëÊ¥ûËØ¶ÊÉÖ
              this.buildTreeHoleDetail()

              // ËØÑËÆ∫Ê†áÈ¢ò
              this.buildCommentsHeader()

              // ËØÑËÆ∫ÂàóË°®
              this.buildCommentsList()
            }
            .layoutWeight(1)
            .width('100%')
            .padding(16)
            .justifyContent(FlexAlign.Start)
            .alignItems(HorizontalAlign.Start)
          }
          .scrollBar(BarState.Off)
          .layoutWeight(1)
          .align(Alignment.TopStart)

          // ËØÑËÆ∫ËæìÂÖ•Ê°ÜÔºà‰ªÖÁôªÂΩïÁî®Êà∑ÊòæÁ§∫Ôºâ
          if (this.isLoggedIn) {
            this.buildCommentInput()
          } else {
            this.buildLoginPrompt()
          }
        } else if (this.isLoading) {
          // Âä†ËΩΩÁä∂ÊÄÅ
          this.buildLoadingState()
        } else {
          // Á©∫Áä∂ÊÄÅ
          Column() {
            Text('Êú™ÊâæÂà∞Ê†ëÊ¥û‰ø°ÊÅØ')
              .fontSize(16)
              .fontColor('#999999')
          }
          .width('100%')
          .height('100%')
          .justifyContent(FlexAlign.Center)
        }
      }
      .width('100%')
      .height('100%')
      .backgroundColor('#FAFAFA')
      .justifyContent(FlexAlign.Start)
      .alignItems(HorizontalAlign.Start)
      .opacity(this.pageOpacity)
      .translate({ x: 0, y: this.pageTranslateY })
      .animation({
        duration: 700,
        curve: Curve.EaseInOut,
        iterations: 1,
        playMode: PlayMode.Normal
      })
    }
    .title('Ê†ëÊ¥ûËØ¶ÊÉÖ')
    .hideTitleBar(true)
    .transition(this.transitionEffect)
    .onReady((ctx: NavDestinationContext) => {
      this.pathStack = ctx.pathStack;

      // Êé•Êî∂È°µÈù¢ÂèÇÊï∞
      const params = ctx.pathInfo.param as TreeHoleItem;
      if (params) {
        console.info('üå≥ [TreeHoleDetailNavPage] Êé•Êî∂Âà∞ÂèÇÊï∞:', JSON.stringify(params));
        this.treeHoleItem = params;
        this.treeHoleId = params.id;
        this.loadComments();
      } else {
        console.error('üå≥ [TreeHoleDetailNavPage] Êú™Êé•Êî∂Âà∞Ê†ëÊ¥ûÊï∞ÊçÆ');
      }

      console.info('üå≥ [TreeHoleDetailNavPage] È°µÈù¢Â∞±Áª™');
    })
    .onBackPressed(() => {
      // ËÆæÁΩÆËøîÂõûËΩ¨Âú∫ÊïàÊûú
      this.transitionEffect = TransitionEffect.IDENTITY;
      this.getUIContext().animateTo({ curve: curves.interpolatingSpring(0, 1, 342, 38) }, () => {
        this.pathStack.pop(false);
      });
      return true;
    })
  }

  /**
   * ËÆæÁΩÆÊ†ëÊ¥ûÊï∞ÊçÆ
   */
  public setTreeHoleItem(item: TreeHoleItem): void {
    this.treeHoleItem = item;
    this.treeHoleId = item.id;
    console.info(`üå≥ [TreeHoleDetailNavPage] ËÆæÁΩÆÊ†ëÊ¥ûÊï∞ÊçÆÔºåID: ${item.id}`);
  }

  /**
   * Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
   */
  private checkLoginStatus(): void {
    // Ê£ÄÊü•tokenÂíåÁî®Êà∑‰ø°ÊÅØÔºà‰∏éÂèëÂ∏ÉÊ†ëÊ¥ûÈ°µÈù¢‰øùÊåÅ‰∏ÄËá¥Ôºâ
    const hasToken = this.loginService.isLoggedIn();
    const currentUser = this.userInfoManager.getCurrentUserInfo(this.getUIContext().getHostContext());
    const hasValidUserInfo = currentUser !== null && currentUser.userId > 0;
    
    this.isLoggedIn = hasToken && hasValidUserInfo;
    
    console.info(`üå≥ [TreeHoleDetailNavPage] ÁôªÂΩïÁä∂ÊÄÅÊ£ÄÊü• - Token: ${hasToken}, UserInfo: ${hasValidUserInfo}, UserId: ${currentUser?.userId}, ÊúÄÁªàÁªìÊûú: ${this.isLoggedIn}`);
    
    // Â¶ÇÊûúÊúâtoken‰ΩÜÊ≤°ÊúâÁî®Êà∑‰ø°ÊÅØÔºåÂ∞ùËØïÂºÇÊ≠•Ëé∑Âèñ
    if (hasToken && !hasValidUserInfo) {
      console.info('üå≥ [TreeHoleDetailNavPage] Êúâtoken‰ΩÜÁº∫Â∞ëÁî®Êà∑‰ø°ÊÅØÔºåÂ∞ùËØïÂºÇÊ≠•Ëé∑Âèñ');
      this.tryLoadUserInfo();
    }
  }

  /**
   * Â∞ùËØïÂºÇÊ≠•Âä†ËΩΩÁî®Êà∑‰ø°ÊÅØ
   */
  private async tryLoadUserInfo(): Promise<void> {
    try {
      const userInfoResponse = await this.userInfoManager.checkLoginStatus(this.getUIContext().getHostContext());
      if (userInfoResponse) {
        const currentUser = this.userInfoManager.getCurrentUserInfo(this.getUIContext().getHostContext());
        const hasValidUserInfo = currentUser !== null && currentUser.userId > 0;
        this.isLoggedIn = this.loginService.isLoggedIn() && hasValidUserInfo;
        console.info('üå≥ [TreeHoleDetailNavPage] Áî®Êà∑‰ø°ÊÅØËé∑ÂèñÊàêÂäüÔºåÊõ¥Êñ∞ÁôªÂΩïÁä∂ÊÄÅ:', this.isLoggedIn);
      }
    } catch (error) {
      console.warn('üå≥ [TreeHoleDetailNavPage] Áî®Êà∑‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•:', error);
      this.isLoggedIn = false;
    }
  }

  // ===== ‰∫ã‰ª∂Â§ÑÁêÜÊñπÊ≥ï =====

  /**
   * ÂêØÂä®Ê∏êÊòæÂä®Áîª
   */
  private startFadeInAnimation(): void {
    setTimeout(() => {
      this.pageOpacity = 1;
      this.pageTranslateY = 0;
      console.info('[TreeHoleDetailNavPage] üé¨ ÂêØÂä®Ê∏êÊòæÂä®Áîª');
    }, 100);
  }

  /**
   * Âä†ËΩΩËØÑËÆ∫Êï∞ÊçÆ
   */
  private async loadComments(): Promise<void> {
    try {
      this.isLoading = true;
      console.info(`üå≥ [TreeHoleDetailNavPage] ÂºÄÂßãÂä†ËΩΩÊ†ëÊ¥û ${this.treeHoleId} ÁöÑËØÑËÆ∫`);

      const commentsData = await this.treeHoleApiService.getTreeHoleComments(this.treeHoleId, 1, 50);
      this.commentsList = commentsData.list;

      console.info(`üå≥ [TreeHoleDetailNavPage] Âä†ËΩΩ‰∫Ü ${commentsData.list.length} Êù°ËØÑËÆ∫`);
    } catch (error) {
      console.error('üå≥ [TreeHoleDetailNavPage] Âä†ËΩΩËØÑËÆ∫Â§±Ë¥•:', error);
    } finally {
      this.isLoading = false;
    }
  }

  /**
   * ÂèëÈÄÅËØÑËÆ∫
   */
  private async handleSendComment(): Promise<void> {
    // 1. È™åËØÅËæìÂÖ•ÂÜÖÂÆπ
    if (this.commentText.trim().length === 0) {
      this.showToast('ËØ∑ËæìÂÖ•ËØÑËÆ∫ÂÜÖÂÆπ');
      return;
    }

    if (this.commentText.trim().length > 500) {
      this.showToast('ËØÑËÆ∫ÂÜÖÂÆπ‰∏çËÉΩË∂ÖËøá500‰∏™Â≠óÁ¨¶');
      return;
    }

    // 2. Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅÔºà‰∏éÂèëÂ∏ÉÊ†ëÊ¥ûÈ°µÈù¢‰∏ÄËá¥Ôºâ
    if (!this.isLoggedIn) {
      this.showLoginRequiredDialog();
      return;
    }

    // 3. Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÔºà‰∏éÂèëÂ∏ÉÊ†ëÊ¥ûÈ°µÈù¢‰∏ÄËá¥ÁöÑÊñπÂºèÔºâ
    const currentUser = this.userInfoManager.getCurrentUserInfo(this.getUIContext().getHostContext());
    if (!currentUser || !currentUser.userId) {
      this.showToast('Áî®Êà∑‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•ÔºåËØ∑ÈáçÊñ∞ÁôªÂΩï');
      this.isLoggedIn = false; // Êõ¥Êñ∞ÁôªÂΩïÁä∂ÊÄÅ
      return;
    }

    try {
      // 4. ËÆæÁΩÆloadingÁä∂ÊÄÅ
      this.isCommenting = true;
      console.info('üå≥ [TreeHoleDetailNavPage] ÂºÄÂßãÂèëÈÄÅËØÑËÆ∫');

      // 5. ÊûÑÈÄ†APIËØ∑Ê±ÇÂèÇÊï∞Ôºà‰∏éÂèëÂ∏ÉÊ†ëÊ¥ûÂÆåÂÖ®‰∏ÄËá¥ÁöÑÊ†ºÂºèÔºâ
      const request: PostTreeHoleRequest = {
        content: this.commentText.trim(),
        anonymous: 0, // ËØÑËÆ∫ÊöÇ‰∏çÊîØÊåÅÂåøÂêçÔºåÂõ∫ÂÆö‰∏∫0
        parentId: this.treeHoleId, // ËØÑËÆ∫Êó∂parentId‰∏∫Ê†ëÊ¥ûID
        userId: currentUser.userId, // ‰ΩøÁî®ÁúüÂÆûÁöÑÁî®Êà∑ID
        deleteTime: "" // ËØÑËÆ∫‰∏çËÆæÁΩÆÂà†Èô§Êó∂Èó¥
      };

      console.info('üå≥ [TreeHoleDetailNavPage] ÂºÄÂßãÂèëÂ∏ÉËØÑËÆ∫ÔºåËØ∑Ê±ÇÂèÇÊï∞:', JSON.stringify(request));

      // 6. Ë∞ÉÁî®APIÂèëÂ∏ÉËØÑËÆ∫
      const result = await this.treeHoleApiService.postCommentWithFullRequest(request);

      // 7. Â§ÑÁêÜÂìçÂ∫îÁªìÊûú
      if (result.code === 200) {
        console.info('üå≥ [TreeHoleDetailNavPage] ËØÑËÆ∫ÂèëÂ∏ÉÊàêÂäü');
        
        // Ê∏ÖÁ©∫ËæìÂÖ•Ê°Ü
        this.commentText = '';
        
        // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
        this.showToast('ËØÑËÆ∫ÂèëÂ∏ÉÊàêÂäü');
        
        // 8. Âà∑Êñ∞ËØÑËÆ∫ÂàóË°®
        await this.loadComments();
      } else {
        console.error('üå≥ [TreeHoleDetailNavPage] ËØÑËÆ∫ÂèëÂ∏ÉÂ§±Ë¥•:', result.msg);
        this.showToast(result.msg || 'ËØÑËÆ∫ÂèëÂ∏ÉÂ§±Ë¥•');
      }
    } catch (error) {
      console.error('üå≥ [TreeHoleDetailNavPage] ÂèëÈÄÅËØÑËÆ∫Â§±Ë¥•:', error);
      
      // ÂèãÂ•ΩÁöÑÈîôËØØÊèêÁ§∫
      if (error instanceof Error) {
        if (error.message.includes('Áî®Êà∑Êú™ÁôªÂΩï')) {
          this.showToast('ÁôªÂΩïÁä∂ÊÄÅÂ∑≤ËøáÊúüÔºåËØ∑ÈáçÊñ∞ÁôªÂΩï');
          this.isLoggedIn = false; // Êõ¥Êñ∞ÁôªÂΩïÁä∂ÊÄÅ
        } else if (error.message.includes('ÁΩëÁªú')) {
          this.showToast('ÁΩëÁªúËøûÊé•ÂºÇÂ∏∏ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªú');
        } else {
          this.showToast('ËØÑËÆ∫ÂèëÂ∏ÉÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï');
        }
      } else {
        this.showToast('ËØÑËÆ∫ÂèëÂ∏ÉÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï');
      }
    } finally {
      // 9. ÈáçÁΩÆloadingÁä∂ÊÄÅ
      this.isCommenting = false;
    }
  }

  /**
   * Â§ÑÁêÜËØÑËÆ∫ÁÇπËµû
   */
  private async handleCommentLike(comment: TreeHoleComment): Promise<void> {
    try {
      console.info(`üå≥ [TreeHoleDetailNavPage] ÁÇπËµûËØÑËÆ∫ ${comment.id}`);

      const newIsLiked = !(comment.isLiked ?? false);
      const result = await this.treeHoleApiService.toggleCommentLike(comment.id, newIsLiked);

      if (result.code === 200) {
        // Êõ¥Êñ∞Êú¨Âú∞Áä∂ÊÄÅ
        const index = this.commentsList.findIndex(c => c.id === comment.id);
        if (index >= 0) {
          this.commentsList[index].isLiked = newIsLiked;
          this.commentsList[index].likeCount += newIsLiked ? 1 : -1;
        }
      }
    } catch (error) {
      console.error('üå≥ [TreeHoleDetailNavPage] ËØÑËÆ∫ÁÇπËµûÂ§±Ë¥•:', error);
    }
  }

  /**
   * Â§ÑÁêÜËØÑËÆ∫ÁÇπË∏©
   */
  private async handleCommentDislike(comment: TreeHoleComment): Promise<void> {
    try {
      console.info(`üå≥ [TreeHoleDetailNavPage] ÁÇπË∏©ËØÑËÆ∫ ${comment.id}`);

      const newIsDisliked = !(comment.isDisliked ?? false);
      const result = await this.treeHoleApiService.toggleCommentDislike(comment.id, newIsDisliked);

      if (result.code === 200) {
        // Êõ¥Êñ∞Êú¨Âú∞Áä∂ÊÄÅ
        const index = this.commentsList.findIndex(c => c.id === comment.id);
        if (index >= 0) {
          this.commentsList[index].isDisliked = newIsDisliked;
          this.commentsList[index].dislikeCount += newIsDisliked ? 1 : -1;
        }
      }
    } catch (error) {
      console.error('üå≥ [TreeHoleDetailNavPage] ËØÑËÆ∫ÁÇπË∏©Â§±Ë¥•:', error);
    }
  }

  /**
   * Ê†ºÂºèÂåñËØÑËÆ∫Êó∂Èó¥
   */
  private formatCommentTime(timeStr: string): string {
    try {
      const commentTime = new Date(timeStr).getTime();
      const currentTime = new Date().getTime();
      const timeDiff = currentTime - commentTime;

      const minutes = Math.floor(timeDiff / (1000 * 60));
      const hours = Math.floor(timeDiff / (1000 * 60 * 60));
      const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));

      if (minutes < 1) {
        return 'ÂàöÂàö';
      } else if (minutes < 60) {
        return `${minutes}ÂàÜÈíüÂâç`;
      } else if (hours < 24) {
        return `${hours}Â∞èÊó∂Ââç`;
      } else if (days < 7) {
        return `${days}Â§©Ââç`;
      } else {
        return timeStr.substring(5, 16); // ÊòæÁ§∫Êúà-Êó• Êó∂:ÂàÜ
      }
    } catch (error) {
      return timeStr;
    }
  }

  /**
   * Ê†ºÂºèÂåñÈîÄÊØÅÊó∂Èó¥
   */
  private formatDeleteTime(): string {
    if (!this.treeHoleItem?.deleteTime) {
      return '';
    }

    try {
      const deleteTime = new Date(this.treeHoleItem.deleteTime).getTime();
      const currentTime = new Date().getTime();
      const timeDiff = deleteTime - currentTime;

      if (timeDiff <= 0) {
        return 'Â∑≤ÈîÄÊØÅ';
      }

      const hours = Math.floor(timeDiff / (1000 * 60 * 60));
      const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));

      if (hours > 0) {
        return `${hours}Â∞èÊó∂${minutes}ÂàÜÈíüÂêéÈîÄÊØÅ`;
      } else {
        return `${minutes}ÂàÜÈíüÂêéÈîÄÊØÅ`;
      }
    } catch (error) {
      console.error('üå≥ [TreeHoleDetailNavPage] Ê†ºÂºèÂåñÈîÄÊØÅÊó∂Èó¥Â§±Ë¥•:', error);
      return 'Êó∂Èó¥ÈîôËØØ';
    }
  }

  /**
   * Â§ÑÁêÜÂ∏ñÂ≠êÁÇπËµûÁÇπÂáª
   */
  private handleLikeClick(): void {
    if (!this.isLoggedIn) {
      this.showLoginRequiredDialog();
      return;
    }

    // ÂÆûÁé∞ÁÇπËµûÈÄªËæë
    console.info('üå≥ [TreeHoleDetailNavPage] Â§ÑÁêÜÂ∏ñÂ≠êÁÇπËµû');
    // TODO: Ë∞ÉÁî®APIÊé•Âè£
  }

  /**
   * ÊòæÁ§∫ToastÊèêÁ§∫
   */
  private showToast(message: string): void {
    this.getUIContext().showAlertDialog({
      message: message,
      alignment: DialogAlignment.Center,
      autoCancel: true,
      primaryButton: {
        value: 'Á°ÆÂÆö',
        action: () => {
          console.info('üå≥ [TreeHoleDetailNavPage] ToastÁ°ÆËÆ§');
        }
      }
    });
  }

  /**
   * ÊòæÁ§∫ÈúÄË¶ÅÁôªÂΩïÁöÑÂØπËØùÊ°Ü
   */
  private showLoginRequiredDialog(): void {
    this.getUIContext().showAlertDialog({
      title: 'ÈúÄË¶ÅÁôªÂΩï',
      message: 'ÁÇπËµûÂíåËØÑËÆ∫ÂäüËÉΩÈúÄË¶ÅÁôªÂΩïÂêéÊâçËÉΩ‰ΩøÁî®',
      alignment: DialogAlignment.Center,
      primaryButton: {
        value: 'ÂèñÊ∂à',
        action: () => {
          console.info('üå≥ [TreeHoleDetailNavPage] Áî®Êà∑ÂèñÊ∂àÁôªÂΩï');
        }
      },
      secondaryButton: {
        value: 'ÂéªÁôªÂΩï',
        fontColor: '#45CAD9',
        action: () => {
          console.info('üå≥ [TreeHoleDetailNavPage] Áî®Êà∑ÈÄâÊã©ÂéªÁôªÂΩï');
          // TODO: Ë∑≥ËΩ¨Âà∞ÁôªÂΩïÈ°µÈù¢ÊàñÂàáÊç¢Âà∞ÁôªÂΩïTab
        }
      }
    });
  }
}